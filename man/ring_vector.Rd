% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ring_matrix.R, R/ring_vector.R
\name{ring_matrix}
\alias{push}
\alias{ring_matrix}
\alias{ring_vector}
\title{Ring vectors and matrices}
\usage{
ring_matrix(nr_max, nc, type, environment = TRUE)

ring_vector(length_max, type, environment = TRUE)

push(buffer, data, ...)
}
\arguments{
\item{nr_max}{The maximum number of rows}

\item{nc}{The number of columns in the matrix}

\item{type}{The type of storage.  Can be "logical", "integer",
"double", or "complex"}

\item{environment}{Logical indicating if we should use an
environment buffer (\code{\link{ring_buffer_env}}) or
a bytes buffer (\code{\link{ring_buffer_bytes}}).}

\item{length_max}{The maximum number of elements}

\item{buffer}{A ring buffer of some sort}

\item{data}{Data to push into the ring}

\item{...}{Additional arguments passed through to methods}
}
\description{
Simulate an atomic vector or matrix with a ring buffer.  These
functions exist mostly as an example of use of a ring buffer
designed to work with R functions that do not know (or care) that
the object is implemented with a ring buffer behind the scenes.
Elements will be added at the end of the vector and taken from the
beginning.
}
\details{
Note that because the matrix is stored row-wise but R stores
matrices column wise, there is a lot of data transposing going on
here.  If something like this was needed for performance then
you'd want to redo this with column storage.

The \code{push} function is generic and can be used to push
elements onto either a \code{ring_vector} or a \code{ring_matrix}.

Note that these are implemented more as proof-of-concepts rather
than really robust data types.
}

