# The classes here are:
#
# * ring_buffer_env
# * ring_buffer_bytes
# * ring_buffer_bytes_translate
#
# Some of the documentation will not apply identically to the
# different classes, so watch out!
#
# I think I'll generate three output files at once, adding the bytes
# bit automatically.

# OTOH, it might be nicer (a and a little clearer) to highlight the
# differences just once here; so repeat this information for each of
# the files.

# Slurp in each function definition and where they differ we'll print
# up to 3 different usages.

reset:
  short: >-
    Reset the state of the buffer.  This "zeros" the head and tail
    pointer (and may or may not actually reset the data) so that the
    buffer can be used as if fresh.  All data are deleted, but not
    necessarily written to.
  return: Nothing; called for the side effect only.

duplicate:
  short: >-
    Clone the ring buffer, creating a copy.  Copies both the
    underlying data and the position of the head and tail.
  return: A new ring buffer object

grow:
  short: >-
    Increase the size of the buffer by \code{n} elements.
  params:
    n: >-
      The number of additional elements that space should be reserved
      for (scalar non-negative integer).
    exact: >-
      (For bytes buffer only) Logical scalar indicating if growth
      should increase the size by \emph{exactly} \code{n} elements (if
      \code{TRUE}) or so that \emph{at least} \code{n} additional
      elements will fit.

size:
  short: >-
    Return the maximum size of the ring buffer
  params:
    bytes: >-
      (for \code{ring_buffer_bytes} only) Logical, indicating if the
      size should be returned in bytes (rather than logical entries,
      which is the default).
  return: A scalar integer

# NOTE: This one is in bytes buffer only, but could probably be removed?
bytes_data:
  short: >-
    Return the total size of the data storage used in this object.
  return: A scalar integer

stride:
  short: >-
    Length of each element in the ring buffer, in bytes.  Only
    implemented (and meaningful) for the bytes buffer; the environment
    buffer does not support this function as it makes no sense there.
  return: A scalar integer

used:
  short: >-
    Return the amount of space used in the ring buffer.
  params:
    bytes: >-
      (for \code{ring_buffer_bytes} only) Logical, indicating if the
      size should be returned in bytes (rather than logical entries,
      which is the default).
  return: A scalar integer

free:
  short: >-
    Return the amount of space free in the ring buffer.
  params:
    bytes: >-
      (for \code{ring_buffer_bytes} only) Logical, indicating if the
      size should be returned in bytes (rather than logical entries,
      which is the default).
  return: A scalar integer

is_empty:
  short: Test if the ring buffer is empty
  return: A scalar logical

is_full:
  short: Test if the ring buffer is full
  return: A scalar logical

head_pos:
  short: >-
    Return the number of entries from the "start" of the ring buffer
    the head is.  This is mostly useful for debugging.
  params:
    bytes: >-
      (for \code{ring_buffer_bytes} only) Logical, indicating if the
      position should be returned in bytes (rather than logical entries,
      which is the default).
  return: A scalar integer

tail_pos:
  short: >-
    Return the number of entries from the "start" of the ring buffer
    the tail is.  This is mostly useful for debugging.
  params:
    bytes: >-
      (for \code{ring_buffer_bytes} only) Logical, indicating if the
      position should be returned in bytes (rather than logical entries,
      which is the default).
  return: A scalar integer

head:
  short: >-
    Return the contents of the head (the most recently written element
    in the ring buffer).
  value: >-
    It depends a little here.  For \code{ring_buffer_env} this is a
    single R object.  For \code{ring_buffer_bytes} it is a raw vector,
    the same length as the stride of the ring buffer.  For
    \code{ring_buffer_bytes_typed}, a single R object that has been
    translated from raw.

tail:
  short: >-
    Return the contents of the tail (the least recently written element
    in the ring buffer).
  value: As for \code{head}

set:
  short: >-
    Set a number of ring entries to the same value.  The exact
    behaviour here varies depending on the type of ring buffer.  This
    function may overflow the ring buffer; in this case the tail will
    be moved.
  params:
    data: >-
      The data to set each ring element to.  For an environment
      buffer, this may be any R object.  For a bytes buffer it may be
      either a single byte (in which case each ring element will be
      set to that byte, repeated \code{stride} times), or a raw vector
      of length \code{stride}.
    n: The number of entries to set to \code{data}
  value: >-
    Returns the number of elements actually written (which may be less
    than \code{n} if the buffer overflows).

push:
  short: >-
    Push elements onto the ring buffer head.  This may overflow the
    ring buffer, destroying the oldest elememnts in the buffer (and
    moving the position of the tail).
  params:
    data: >-
      Data to push onto the ring buffer.  For
      \code{ring_buffer_bytes}, this must be a raw vector with a
      length that is a multiple of the buffer stride.  For
      \code{ring_buffer_bytes_typed} it must be a vector of the appropriate
      type.  For \code{ring_buffer_env} it may be an arbitrary R
      object (but see \code{iterate} .
    iterate: >-
      For \code{ring_buffer_env} only, changes the behaviour with
      vectors and lists.  Because each element of a
      \code{ring_buffer_env} can b an arbitrary R object, for a list
      \code{x} it is ambiguous if \code{push(x)} should push one
      object onto the buffer, or \code{length(x)} objects
      (i.e. equivalent to \code{push(x[[1]])}, \code{push(x[[2]])},
      etc.  The \code{iterate} argument switches between
      interpretations; if \code{TRUE} (the default) the push will
      iterate over the object using \code{for (el in x)} (with
      appropriate S3 dispatch).  If \code{iterate=FALSE}, then the
      entire object is pushed at once, so always updating only by a
      single element.
  return: >-
    For \code{ring_buffer_bytes}, the data invisibly.  For
    \code{ring_buffer_bytes} and \code{ring_buffer_bytes_typed}, the
    position of the head pointer (relative to the beginning of the
    storage region).

take:
  short: >-
    Destructively take elements from the ring buffer.  This consumes
    from the tail (the least recently added elements).  It is not
    possibly to underflow the buffer; if more elements are requested
    than can be supplied then an error will be thrown and the state of
    the buffer unmodified.
  params:
    n: The number of elements to take.
  value: >-
    For \code{ring_buffer_env} a \code{list} of \code{n} elements.
    For \code{ring_buffer_bytes}, a raw vector of \code{n * stride}
    bytes.  For \code{ring_buffer_bytes_typed}, an vector of \code{n}
    elements of the storage mode of the ring.

read:
  short: >-
    Nondestructively read elements from the ring buffer.  This is
    identical to \code{take} except that the state of the buffer is
    not modified.
  params:
    n: The number of elements to read.
  value: >-
    For \code{ring_buffer_env} a \code{list} of \code{n} elements.
    For \code{ring_buffer_bytes}, a raw vector of \code{n * stride}
    bytes.  For \code{ring_buffer_bytes_typed}, an vector of \code{n}
    elements of the storage mode of the ring.

copy:
  short: >-
    Copy from \emph{this} ring buffer intoa a different ring buffer.
    This is destructive with respect to both ring buffers; the tail
    pointer will be moved in this ring buffer as data are taken, and
    if the destination ring buffer overflows, the tail pointer will be
    moved too.
  params:
    dest: The destination ring buffer - will be modified by this call.
    n: The number of elements to copy

mirror:
  short: >-
    Mirror the contents of \emph{this} ring buffer into a different
    ring buffer.  This differs from \code{copy} in that \emph{this}
    ring buffer is unaffected and in that \emph{all} of this ring
    buffer is copied over (including head/tail positions).  This
    provides an alternative way of duplicating state to
    \code{duplicate} if you already have an appropriately sized ring
    buffer handy.  No allocations will be done.
  params:
    dest: The destination ring buffer - will be modified by this call.

head_offset:
  short: >-
    Nondestructively read the contents of the \code{head} of the
    buffer, offset by \code{n} entries.
  params:
    n: >-
      Head offset.  This moves away from the most recently added item.
      An offset of 0 reads the most recently added element, 1 reads
      the element added before that.

tail_offset:
  short: >-
    Nondestructively read the contents of the \code{tail} of the
    buffer, offset by \code{n} entries.
  params:
    n: >-
      Tail offset.  This moves away from the oldest item.  An offset
      of 0 reads the oldest element, 1 reads the element added after
      that.

take_head:
  short: >-
    As for \code{take}, but operating on the head rather than the
    tail.  This is destructive with respect to the head.
  params:
    n: Number of elements to take.

read_head:
  short: >-
    As for \code{read}, but operating on the head rather than the
    tail.  This is not destructive with respect to the tail.
  params:
    n: Number of elements to read.
